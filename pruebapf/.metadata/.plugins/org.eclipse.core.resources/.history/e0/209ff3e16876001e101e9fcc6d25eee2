package services;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.enterprise.context.RequestScoped;
import javax.inject.Named;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import dto.ReadersDto;
import models.Blogs;
import models.Consecutivo;
import models.Readers;
import utils.NextConsecutive;

@Named("readersImplServices")
@RequestScoped
public class ReadersImplServices {
	
	 @PersistenceContext(unitName="bandelsal")
	 private final EntityManager em = JPA.getEntityManagerFactory().createEntityManager();
	 
	
	public ReadersImplServices() {
		
	}

	
	 public synchronized long getSequence(String tabla) {
		 em.getTransaction().begin();   
		 Consecutivo c = em.find(Consecutivo.class, tabla);
		    long valor = c.getValor();
		    c.setValor(valor + 1);
		    em.merge(c);
		    //actualizo el valor
		    em.getTransaction().commit();
		    return valor;
		  }
	
	
   
    public List<ReadersDto> getReadersDto(ReadersDto blog) {
        List<ReadersDto> result = new ArrayList<ReadersDto>();
        List<Blogs> list = new ArrayList<Blogs>();

        StringBuffer sql = new StringBuffer();
        Query query = null;
        Map<String, Object> map = new HashMap<String, Object>();

        sql.append("SELECT t FROM ");
        sql.append(Readers.class.getCanonicalName());
        sql.append(" t WHERE 1 = 1 ");

        if (blog.getId() > 0) {
            sql.append(" AND t.id = :id ");
            map.put("id", blog.getId());
        }

        if (blog.getNames() != null && !blog.getNames().isEmpty()) {
            sql.append(" AND t.title = :title ");
            map.put("title", blog.getNames());
        }

        sql.append(" ORDER BY t.id ");
        query = em.createQuery(sql.toString());
        for (Map.Entry<String, Object> valor : map.entrySet()) {
            query.setParameter(valor.getKey(), valor.getValue());
        }

        list = query.getResultList();
        for (Readers b : list) {
			ReadersDto bDto = new ReadersDto();
			bDto.setId(b.getId());
			bDto.setNames(b.getNames());
			result.add(bDto);
		}
        
        return result;
    }

    public void create(ReadersDto blogDto) {
        em.getTransaction().begin();
        Blogs blog = new Blogs();
        blog.setId(getSequence(NextConsecutive.BLOGS));
        blog.setTitle(blogDto.getTitle());
        blog.setDescription(blogDto.getDescription());
        em.persist(blog);
        em.getTransaction().commit();
    }

    public ReadersDto getBlogById(Long id) {
    	ReadersDto dto = new ReadersDto();
    	Blogs blog = em.find(Blogs.class, id);
    	if (blog != null) {
			dto.setId(blog.getId());
			dto.setTitle(blog.getTitle());
			dto.setDescription(blog.getDescription());
		}
    	
    	return dto;
    }

    public void update(ReadersDto dto) {
    	Blogs blog = em.find(Blogs.class, dto.getId());
    	blog.setId(dto.getId());
    	blog.setTitle(dto.getTitle());
    	blog.setDescription(dto.getDescription());
        em.getTransaction().begin();
        em.merge(blog);
        em.getTransaction().commit();
    }

    public void delete(Long id) {
        em.getTransaction().begin();
        Blogs blog = em.find(Blogs.class, id);
        if (blog != null) {
            em.remove(blog);
        }
        em.getTransaction().commit();
    }
//
//    public void createBlogReader(Blog blog, Reader reader) {
//        em.getTransaction().begin();
//        BlogsReaders br = new BlogsReaders();
//        br.setB_id(blog.getId());
//        br.setR_id(reader.getId());
//        em.persist(br);
//        em.getTransaction().commit();
//    }



}

